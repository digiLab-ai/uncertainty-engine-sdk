name: End-to-end tests

on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 09,17 * * *" # Run every day at 9:00 and 17:00

jobs:
  dev:
    uses: ./.github/workflows/e2e-environment.yaml
    with:
      ue-environment: dev
    secrets:
      ue-password: ${{ secrets.UE_DEV_PASSWORD }}
      ue-username: ${{ secrets.UE_DEV_USERNAME }}
      ue-project-id: ${{ secrets.UE_DEV_PROJECT_ID }}
      ue-workflow-id: ${{ secrets.UE_DEV_WORKFLOW_ID }}

  prod-committed:
    # If the tests were triggered by a PR then test this bleeding-edge
    # commit in production. We accept that these tests will fail if they
    # use APIs not yet deployed to production. The onus is on the
    # developer to recognise if a test failure is significant.
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/e2e-environment.yaml
    with:
      ue-environment: prod
    secrets:
      ue-password: ${{ secrets.UE_PROD_PASSWORD }}
      ue-username: ${{ secrets.UE_PROD_USERNAME }}
      ue-project-id: ${{ secrets.UE_PROD_PROJECT_ID }}
      ue-workflow-id: ${{ secrets.UE_PROD_WORKFLOW_ID }}

  prod-released:
    # If the tests were triggered by a schedule then test the latest
    # release of the SDK--rather than the latest commit--in production.
    # We expect these tests to always pass because the latest release
    # of the SDK should always be compatible with the latest production
    # release of the platform, regardless of the state of the latest
    # unreleased commit.
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/e2e-environment.yaml
    with:
      ue-environment: prod
      use-sdk-release: true
    secrets:
      ue-password: ${{ secrets.UE_PROD_PASSWORD }}
      ue-username: ${{ secrets.UE_PROD_USERNAME }}
      ue-project-id: ${{ secrets.UE_PROD_PROJECT_ID }}
      ue-workflow-id: ${{ secrets.UE_PROD_WORKFLOW_ID }}
